server Creation
----------------

-1- create package.json file  - npm init
-2- install express framework - npm i express


server side technology   - node   [-feature of node is it resolves multiple request at a time]

api
----
http request

header             body
secret data        data-json


type
------
GET     -read
POST    -create
PUT     -complete updation
PATCH   -partial updation
DELETE  -remove

server response status code
----------------------------

100    -information (like alert)
200    -success
300    -redirection
400    -client side error
500    -server side error


server creation steps
----------------------
1- import express
2- create app using express
3- port number seting   3000 
4- resolve http requests


Nodemon
--------
if we run server using node, recombilation not work
so we use another server Nodemon.

installing nodemon localy
-npm i nodemon

to run nodemon 
-npx nodemon ./file_path_name


methods
--------

.use(express.json())     - to convert all request data from json to js that comes to server
.json(data)              - to covert data from js to json and send data
.status(statusCode)      - change the response status code as statusCode


Token in server
===============
JWT TOKEN - json web Token
to install Token      - npm i jsonwebtoken

-jsonwebtoken    - is a library
-sign()          - method used to generate jwt token
-verify()        - used to verify json web token

 
token verification
-------------------
 middlewares-
token verification can do using middlewares ,
middlewares have the capacity to control server requests.
-middleware is a funtion with three arguments:

         -request
         -response
         -next

 - two type of middleware:

    1.Application Specific middleware   -work before all requestsin server
    2.Router Specific middleware        -can apply to Specific request in server


how to solve runtime errors in js
----------------------------------
try except 

try   - error causing code 
catch - error solve
 
